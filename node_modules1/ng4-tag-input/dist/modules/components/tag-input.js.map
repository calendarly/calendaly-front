{"version":3,"sources":["tag-input.ts"],"names":[],"mappings":"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","file":"tag-input.js","sourceRoot":"","sourcesContent":["import {\n    Component,\n    forwardRef,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList\n} from '@angular/core';\n\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TagInputAccessor, TagModel } from './helpers/accessor';\nimport { TagInputForm } from './tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from './dropdown/tag-input-dropdown.component';\nimport { TagComponent } from './tag/tag.component';\n\nimport 'rxjs/add/operator/debounceTime';\n\nimport { animations } from './animations';\nimport * as constants from './helpers/constants';\nimport listen from './helpers/listen';\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\n/**\n * A component for entering a list of terms to be used with ngModel.\n */\n\nexport class TagInputComponent extends TagInputAccessor implements OnInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     * @type {Array}\n     */\n     public separatorKeys: string[] = [];\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     * @type {Array}\n     */\n     public separatorKeyCodes: number[] = [];\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     * @type {string}\n     */\n     public placeholder: string = constants.PLACEHOLDER;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     * @type {string}\n     */\n     public secondaryPlaceholder: string = constants.SECONDARY_PLACEHOLDER;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     * @type {number}\n     */\n     public maxItems: number;\n\n    /**\n     * @name readonly\n     * @desc if set to true, the user cannot remove/addItem new items\n     * @type {boolean}\n     */\n     public readonly: boolean;\n\n    /**\n     * @name transform\n     * @desc function passed to the component to transform the value of the items, or reject them instead\n     */\n     public transform: (item: string) => string = (item) => item;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     * @type {Validators[]}\n     */\n     public validators = [];\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    * @type {Boolean}\n    */\n     public onlyFromAutocomplete = false;\n\n\t/**\n     * @name errorMessages\n     * @type {Map<string, string>}\n     */\n     public errorMessages: {[key: string]: string} = {};\n\n    /**\n     * @name theme\n     * @type {string}\n     */\n     public theme: string;\n\n    /**\n     * @name onTextChangeDebounce\n     * @type {number}\n     */\n     public onTextChangeDebounce = 250;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n     public inputId: string;\n\n    /**\n     * - custom class assigned to the input\n     */\n     public inputClass: string;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n     public clearOnBlur: string;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n     public hideForm: string;\n\n    /**\n     * @name addOnBlur\n     */\n     public addOnBlur: boolean;\n\n    /**\n     * @name addOnPaste\n     */\n     public addOnPaste: boolean;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n     public pasteSplitPattern = ',';\n\n    /**\n     * @name blinkIfDupe\n     * @type {boolean}\n     */\n     public blinkIfDupe = true;\n\n    /**\n     * @name removable\n     * @type {boolean}\n     */\n     public removable = true;\n\n    /**\n     * @name editable\n     * @type {boolean}\n     */\n     public editable = false;\n\n    /**\n     * @name allowDupes\n     * @type {boolean}\n     */\n     public allowDupes = false;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     * @type {boolean}\n     */\n     public modelAsStrings = false;\n\n    /**\n     * @name trimTags\n     * @type {boolean}\n     */\n     public trimTags = true;\n\n    /**\n     * @name inputText\n     */\n     public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     * @type {boolean}\n     */\n     public ripple = true;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     * @type {EventEmitter<string>}\n     */\n     public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     * @type {EventEmitter<string>}\n     */\n     public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     * @type {EventEmitter<string>}\n     */\n     public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     * @type {EventEmitter<string>}\n     */\n     public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     * @type {EventEmitter<string>}\n     */\n     public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     * @type {EventEmitter<string>}\n     */\n     public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     * @type {EventEmitter<TagModel>}\n     */\n     public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     * @type {EventEmitter<string>}\n     */\n     public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     * @type {EventEmitter<TagModel>}\n     */\n     public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n     public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n     public templates: QueryList<TemplateRef<any>>;\n\n\t/**\n     * @name inputForm\n     * @type {TagInputForm}\n     */\n     public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     * @type {String}\n     */\n    public selectedTag: TagModel;\n\n    /**\n     * @name isLoading\n     * @type {boolean}\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n     public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     * @type []\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{(fun): any}[]>[],\n        [constants.KEYUP]: <{(fun): any}[]>[],\n        change: <{(fun): any}[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     * @type {EventEmitter}\n     */\n     public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     * @type {string}\n     */\n    public inputTextValue = '';\n\n    constructor(private renderer: Renderer) {\n        super();\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    public removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectedTag = undefined;\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     */\n    public addItem(isFromAutocomplete = false, item: TagModel = this.formValue): void {\n        const display = this.getItemDisplay(item);\n        const inputValue = this.setInputValue(display);\n        const isFormInvalid = !this.inputForm.form.valid || !inputValue;\n\n        // return early if the form is invalid\n        if (isFormInvalid) {\n            return;\n        }\n\n        const tag = this.createTag(isFromAutocomplete ? item : inputValue);\n        const isValid = this.isTagValid(tag, isFromAutocomplete);\n\n        // append new tag if everything is valid\n        if (isValid) {\n            this.appendNewTag(tag);\n\n            // emit event\n            this.onAdd.emit(tag);\n        } else {\n            // otherwise, emit validation error event\n            this.onValidationError.emit(tag);\n        }\n\n        // reset control and focus input\n        this.setInputValue('');\n\n        // focus input\n        this.focus(true, false);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid(tag: TagModel, isFromAutocomplete = false): boolean {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !isFromAutocomplete) {\n            return;\n        }\n\n        const dupe = this.findDupe(tag, isFromAutocomplete);\n        const hasDupe = !!dupe && dupe !== undefined;\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && hasDupe && this.blinkIfDupe) {\n            const item = this.tags.find(_tag => {\n                return this.getItemValue(_tag.model) === this.getItemValue(dupe);\n            });\n\n            if (!!item) {\n                item.blink();\n            }\n        }\n\n        const fromAutocomplete = isFromAutocomplete && this.onlyFromAutocomplete;\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !hasDupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((fromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name appendNewTag\n     * @param tag\n     */\n    public appendNewTag(tag: TagModel): void {\n        const newTag = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        // push item to array of items\n        this.items = [...this.items, newTag];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     * @returns {{}}\n     */\n    public createTag(model: TagModel): TagModel {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     */\n    public selectItem(item: TagModel): void {\n        if (this.readonly || !item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        // emit event\n        this.onSelect.emit(item);\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    this.removeItem(this.selectedTag, this.items.indexOf(this.selectedTag));\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.switchPrev(data.model);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.switchNext(data.model);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                this.switchNext(data.model);\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    /**\n     * @name seyInputValue\n     * @param value\n     * @returns {string}\n     */\n    public setInputValue(value: string): string {\n        const item = value ? this.transform(value) : '';\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(item);\n\n        return item;\n    }\n\n    /**\n     * @name getControl\n     * @returns {FormControl}\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n\t/**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.readonly) {\n            return;\n        }\n\n        this.selectedTag = undefined;\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n\n        if (displayAutocomplete && this.dropdown) {\n            this.dropdown.show();\n        }\n    }\n\n\t/**\n     * @name blur\n     */\n    public blur(): void {\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     * @returns {boolean}\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     * @returns {boolean}\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ? this.dropdown.templates.first : undefined;\n\n        return template && template !== menuTemplate;\n    }\n\n    /**\n     * @name switchNext\n     * @param item { TagModel }\n     */\n    public switchNext(item: TagModel): void {\n        if (this.tags.last.model === item) {\n            this.focus(true);\n            return;\n        }\n\n        const tags = this.tags.toArray();\n        const tagIndex = tags.findIndex(tag => tag.model === item);\n        const tag = tags[tagIndex + 1];\n\n        tag.select.call(tag);\n    }\n\n    /**\n     * @name switchPrev\n     * @param item { TagModel }\n     */\n    public switchPrev(item: TagModel): void {\n        if (this.tags.first.model !== item) {\n            const tags = this.tags.toArray();\n            const tagIndex = tags.findIndex(tag => tag.model === item);\n            const tag = tags[tagIndex - 1];\n\n            tag.select.call(tag);\n        }\n    }\n\n\t/**\n     * @name maxItemsReached\n     * @returns {boolean}\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined && this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     * @return {any}\n     */\n    public get formValue(): string {\n        return this.inputForm.value.value;\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const maxItemsReached = this.maxItems !== undefined && this.items && this.items.length > this.maxItems;\n\n        if (maxItemsReached) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.addItem();\n            }\n\n        }, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                    this.tags.last.select.call(this.tags.last);\n            }\n        });\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener(): void {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', this.onPasteCallback.bind(this));\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form.valueChanges\n            .debounceTime(this.onTextChangeDebounce)\n            .subscribe(() => this.onTextChange.emit(this.formValue));\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        this.inputForm\n            .onBlur\n            .filter(() => this.dropdown && this.dropdown.isVisible)\n            .subscribe(() => {\n                if (this.addOnBlur) {\n                    this.addItem();\n                }\n\n                this.setInputValue('');\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     * @return {undefined|TagModel}\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        return this.items.find((item: TagModel) => this.getItemValue(item) === tag[identifyBy]);\n    }\n\n    /**\n     * @name trackBy\n     * @param item\n     * @returns {string}\n     */\n    private trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback(data: ClipboardEvent): void {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item))\n            .forEach(item => this.addItem(false, item));\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag-input',\n    providers: [ CUSTOM_ACCESSOR ],\n    styleUrls: [ './tag-input.style.scss' ],\n    templateUrl: './tag-input.template.html',\n    animations: animations\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'separatorKeys': [{ type: Input },],\n'separatorKeyCodes': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'secondaryPlaceholder': [{ type: Input },],\n'maxItems': [{ type: Input },],\n'readonly': [{ type: Input },],\n'transform': [{ type: Input },],\n'validators': [{ type: Input },],\n'onlyFromAutocomplete': [{ type: Input },],\n'errorMessages': [{ type: Input },],\n'theme': [{ type: Input },],\n'onTextChangeDebounce': [{ type: Input },],\n'inputId': [{ type: Input },],\n'inputClass': [{ type: Input },],\n'clearOnBlur': [{ type: Input },],\n'hideForm': [{ type: Input },],\n'addOnBlur': [{ type: Input },],\n'addOnPaste': [{ type: Input },],\n'pasteSplitPattern': [{ type: Input },],\n'blinkIfDupe': [{ type: Input },],\n'removable': [{ type: Input },],\n'editable': [{ type: Input },],\n'allowDupes': [{ type: Input },],\n'modelAsStrings': [{ type: Input },],\n'trimTags': [{ type: Input },],\n'inputText': [{ type: Input },],\n'ripple': [{ type: Input },],\n'onAdd': [{ type: Output },],\n'onRemove': [{ type: Output },],\n'onSelect': [{ type: Output },],\n'onFocus': [{ type: Output },],\n'onBlur': [{ type: Output },],\n'onTextChange': [{ type: Output },],\n'onPaste': [{ type: Output },],\n'onValidationError': [{ type: Output },],\n'onTagEdited': [{ type: Output },],\n'dropdown': [{ type: ContentChild, args: [TagInputDropdown, ] },],\n'templates': [{ type: ContentChildren, args: [TemplateRef, {descendants: false}, ] },],\n'inputForm': [{ type: ViewChild, args: [TagInputForm, ] },],\n'tags': [{ type: ViewChildren, args: [TagComponent, ] },],\n'inputTextChange': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}